generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Wishlist {
  id         String   @id @default(cuid())
  email      String
}


// User Model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  location      String?
  savedProducts String[]
  credits       Int       @default(10)
  role          UserRole  @default(USER) 
  isActivated   Boolean   @default(true)
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  
  products      Product[]
  // comments      Comment[]
  // tags          Tag[]
  // likes         Like[]

  @@map("users")
}

// // Product Model
enum ProductStatus {
  NEW
  FEATURED
  TRENDING
}

model Product {
  id              String   @id @default(cuid())
  name            String
  slug            String
  title           String
  description     String
  websiteUrl      String
  imageUrl        String
  views           Int      @default(0)
  upvotes         Int      @default(0)
  downvotes       Int      @default(0)
  pricingModel    String
  youtubeUrl      String?
  isPromoted      Boolean? @default(false)
  status          ProductStatus @default(NEW)
  userId          User     @relation(fields: [createdBy], references: [id])
  createdBy       String

  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("products")
}

// model Comment {
//   id          String   @id @default(cuid())
//   feedback    String
//   likes       Like[]
//   createdBy   User     @relation(fields: [userId], references: [id])
//   userId      String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   product     Product  @relation(fields: [productId], references: [id])
//   productId   String
// }

// model Like {
//   id        String   @id @default(cuid())
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String
//   comment   Comment  @relation(fields: [commentId], references: [id])
//   commentId String
// }

// model Tag {
//   id        String   @id @default(cuid())
//   name      String
//   description String
//   products  Product[]
//   followers User[]
//   createdAt DateTime @default(now())
// }